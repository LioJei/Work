diff --git a/caj2pdf b/caj2pdf
index 80a02de..166d11c 100755
--- a/caj2pdf
+++ b/caj2pdf
@@ -15,6 +15,7 @@ if __name__ == "__main__":
     convert_parser = subparsers.add_parser("convert", help="Convert the CAJ file to PDF file.")
     convert_parser.add_argument("input", help="Path to the CAJ file.")
     convert_parser.add_argument("-o", "--output", help="Output path to the PDF file.", required=False)
+    convert_parser.add_argument("-m", "--mutool", help="Executable path to mutool.", required=True)
 
     outlines_parser = subparsers.add_parser("outlines", help="Extract outlines from the CAJ file and add it to PDF file.")
     outlines_parser.add_argument("input", help="Path to the CAJ file.")
@@ -49,7 +50,7 @@ if __name__ == "__main__":
                 args.output = os.path.splitext(args.input)[0] + ".pdf"
             else:
                 args.output = args.input + ".pdf"
-        caj.convert(args.output)
+        caj.convert(args.output, args.mutool)
 
     if args.command == "outlines":
         caj = CAJParser(args.input)
diff --git a/cajparser.py b/cajparser.py
index 1a739fc..ca78988 100644
--- a/cajparser.py
+++ b/cajparser.py
@@ -111,17 +111,17 @@ class CAJParser(object):
                 f.write(b'    ' * (toc["level"] - 1) + toc["title"]
                         + b'    ' + str(toc["page"]).encode("utf-8") + b'\n')
 
-    def convert(self, dest):
+    def convert(self, dest, mutool):
         if self.format == "CAJ":
-            self._convert_caj(dest)
+            self._convert_caj(dest, mutool)
         elif self.format == "HN":
-            self._convert_hn(dest)
+            self._convert_hn(dest, mutool)
         elif self.format == "C8":
-            self._convert_hn(dest)
+            self._convert_hn(dest, mutool)
         elif self.format == "PDF":
             self._convert_pdf(dest)
         elif self.format == "KDH":
-            self._convert_kdh(dest)
+            self._convert_kdh(dest, mutool)
 
     def parse(self):
         if self.format == "CAJ":
@@ -147,7 +147,7 @@ class CAJParser(object):
         elif self.format == "KDH":
             pass
 
-    def _convert_caj(self, dest):
+    def _convert_caj(self, dest, mutool):
         caj = open(self.filename, "rb")
 
         # Extract original PDF data (and add header)
@@ -289,7 +289,7 @@ class CAJParser(object):
 
         # Use mutool to repair xref
         try:
-            check_output(["mutool", "clean", "pdf.tmp", "pdf_toc.pdf"], stderr=STDOUT)
+            check_output([mutool, "clean", "pdf.tmp", "pdf_toc.pdf"], stderr=STDOUT)
         except CalledProcessError as e:
             print(e.output.decode("utf-8"))
             raise SystemExit("Command mutool returned non-zero exit status " + str(e.returncode))
@@ -304,7 +304,7 @@ class CAJParser(object):
         os.remove("pdf.tmp")
         os.remove("pdf_toc.pdf")
 
-    def _convert_hn(self, dest):
+    def _convert_hn(self, dest, mutool):
         caj = open(self.filename, "rb")
         image_list = []
 
@@ -374,7 +374,7 @@ class CAJParser(object):
                 current_offset = offset_to_image_data + size_of_image_data
                 if (image_type[image_type_enum] == "JBIG"):
                     from jbigdec import CImage
-                    cimage = CImage(image_data)
+                    cimage = CImage(image_data, mutool)
                     out = cimage.DecodeJbig()
                     # PBM is only padded to 8 rather than 32.
                     # If the padding is larger, write padded file.
@@ -395,7 +395,7 @@ class CAJParser(object):
                     )
                 elif (image_type[image_type_enum] == "JBIG2"):
                     from jbig2dec import CImage
-                    cimage = CImage(image_data)
+                    cimage = CImage(image_data, mutool)
                     out = cimage.DecodeJbig2()
                     # PBM is only padded to 8 rather than 32.
                     # If the padding is larger, write padded file.
@@ -602,7 +602,7 @@ class CAJParser(object):
     def _convert_pdf(self, dest):
         copy(self.filename, dest)
 
-    def _convert_kdh(self, dest):
+    def _convert_kdh(self, dest, mutool):
         #  Read KDH file.
         fp = open(self.filename, "rb")
         origin = fp.read()
@@ -632,7 +632,7 @@ class CAJParser(object):
 
         # Use mutool to repair xref
         try:
-            check_output(["mutool", "clean", dest + ".tmp", dest], stderr=STDOUT)
+            check_output([mutool, "clean", dest + ".tmp", dest], stderr=STDOUT)
         except CalledProcessError as e:
             print(e.output.decode("utf-8"))
             raise SystemExit("Command mutool returned non-zero exit status " + str(e.returncode))
diff --git a/jbig2dec.py b/jbig2dec.py
index f213a3a..ec77cb4 100755
--- a/jbig2dec.py
+++ b/jbig2dec.py
@@ -13,58 +13,29 @@
 
 
 from ctypes import *
+import os
 import struct
 
-import platform
-
-arch = platform.architecture()
-if (arch[1] == 'WindowsPE'):
-    if (arch[0] == '64bit'):
-        libjbig2codec = cdll.LoadLibrary("./lib/bin/libjbig2codec-w64.dll")
-    else:
-        libjbig2codec = cdll.LoadLibrary("./lib/bin/libjbig2codec-w32.dll")
-else:
-    libjbig2codec = cdll.LoadLibrary("./libjbig2codec.so")
-
-decode_jbig2data_c    = libjbig2codec.decode_jbig2data_c
-
-decode_jbig2data_c.restype   = c_int
-decode_jbig2data_c.argtypes  = [c_void_p, c_int, c_void_p, c_int, c_int, c_int, c_int]
-
 class CImage:
-    def __init__(self, buffer):
+    def __init__(self, buffer, mutool):
         self.buffer = buffer
         self.buffer_size=len(buffer)
         (self.width, self.height,
          self.num_planes, self.bits_per_pixel) = struct.unpack("<IIHH", buffer[4:16])
         self.bytes_per_line = ((self.width * self.bits_per_pixel + 31) >> 5) << 2
+        self.workdir = os.path.dirname(mutool)
 
     def DecodeJbig2(self):
         out = create_string_buffer(self.height * self.bytes_per_line)
         width_in_bytes = (self.width * self.bits_per_pixel + 7) >> 3
+        os.chdir(self.workdir)
+        if os.name == 'nt':
+            os.add_dll_directory(os.getcwd())
+            libjbig2codec = cdll.LoadLibrary(os.path.join(os.getcwd(), "libjbig2codec.dll"))
+        else:
+            libjbig2codec = cdll.LoadLibrary(os.path.join(os.getcwd(), "libjbig2codec.so"))
+        decode_jbig2data_c    = libjbig2codec.decode_jbig2data_c
+        decode_jbig2data_c.restype   = c_int
+        decode_jbig2data_c.argtypes  = [c_void_p, c_int, c_void_p, c_int, c_int, c_int, c_int]
         decode_jbig2data_c(self.buffer[48:], self.buffer_size-48, out, self.width, self.height, self.bytes_per_line, width_in_bytes)
         return out
-
-if __name__ == '__main__':
-    import sys, os
-
-    if len(sys.argv) < 3:
-        print("Usage: %s input output" % sys.argv[0])
-        sys.exit()
-
-    f = open(sys.argv[1], "rb")
-    buffer_size = os.stat(sys.argv[1]).st_size
-    buffer = f.read()
-
-    cimage = CImage(buffer)
-    out = cimage.DecodeJbig2()
-
-    # PBM is only padded to 8 rather than 32.
-    # If the padding is larger, write padded file.
-    if (cimage.bytes_per_line > ((cimage.width +7) >> 3)):
-        cimage.width = cimage.bytes_per_line << 3
-
-    with open(sys.argv[2], "wb") as fout:
-        fout.write("P4\n".encode("ascii"))
-        fout.write(("%d %d\n" % (cimage.width, cimage.height)).encode("ascii"))
-        fout.write(out)
diff --git a/jbigdec.py b/jbigdec.py
index 9d833b7..314099f 100755
--- a/jbigdec.py
+++ b/jbigdec.py
@@ -17,66 +17,26 @@ from ctypes import *
 import os
 import struct
 
-import platform
-
-arch = platform.architecture()
-if (arch[1] == 'WindowsPE'):
-    if (arch[0] == '64bit'):
-        libjbigdec = cdll.LoadLibrary("./lib/bin/libjbigdec-w64.dll")
-    else:
-        libjbigdec = cdll.LoadLibrary("./lib/bin/libjbigdec-w32.dll")
-else:
-    libjbigdec = cdll.LoadLibrary("./libjbigdec.so")
-
-#SaveJbigAsBmp = libjbigdec.SaveJbigAsBmp
-#SaveJbigAsBmp.restype = None
-#SaveJbigAsBmp.argtypes = [c_void_p, c_int, c_char_p]
-
-#SaveJbig2AsBmp = libjbigdec.SaveJbig2AsBmp
-#SaveJbig2AsBmp.restype = None
-#SaveJbig2AsBmp.argtypes = [c_void_p, c_int, c_char_p]
-
-jbigDecode = libjbigdec.jbigDecode
-jbigDecode.restype = None
-jbigDecode.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_void_p]
 
 class CImage:
-    def __init__(self, buffer):
+    def __init__(self, buffer, mutool):
         self.buffer = buffer
         self.buffer_size=len(buffer)
         (self.width, self.height,
          self.num_planes, self.bits_per_pixel) = struct.unpack("<IIHH", buffer[4:16])
         self.bytes_per_line = ((self.width * self.bits_per_pixel + 31) >> 5) << 2
+        self.workdir = os.path.dirname(mutool)
 
     def DecodeJbig(self):
         out = create_string_buffer(self.height * self.bytes_per_line)
+        os.chdir(self.workdir)
+        if os.name == 'nt':
+            os.add_dll_directory(os.getcwd())
+            libjbigdec = cdll.LoadLibrary(os.path.join(os.getcwd(), "libjbigdec.dll"))
+        else:
+            libjbigdec = cdll.LoadLibrary(os.path.join(os.getcwd(), "libjbigdec.so"))
+        jbigDecode = libjbigdec.jbigDecode
+        jbigDecode.restype = None
+        jbigDecode.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_void_p]
         jbigDecode(self.buffer[48:], self.buffer_size-48, self.height, self.width, self.bytes_per_line, out)
         return out
-
-if __name__ == '__main__':
-    import sys, os
-
-    if len(sys.argv) < 3:
-        print("Usage: %s input output" % sys.argv[0])
-        sys.exit()
-
-    f = open(sys.argv[1], "rb")
-    buffer_size = os.stat(sys.argv[1]).st_size
-    buffer = f.read()
-
-    #SaveJbigAsBmp(buffer, buffer_size, sys.argv[2].encode("ascii"))
-
-    cimage = CImage(buffer)
-    out = cimage.DecodeJbig()
-
-    # PBM is only padded to 8 rather than 32.
-    # If the padding is larger, write padded file.
-    width = cimage.width
-    if (cimage.bytes_per_line > ((cimage.width +7) >> 3)):
-        width = cimage.bytes_per_line << 3
-
-    fout = open(sys.argv[2].replace(".bmp", ".pbm"), "wb")
-    fout.write("P4\n".encode("ascii"))
-    fout.write(("%d %d\n" % (width, cimage.height)).encode("ascii"))
-    fout.write(out)
-    fout.close()
